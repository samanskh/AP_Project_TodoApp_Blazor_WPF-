@page "/todoitems"
@inject IApiService ApiService

<div class="container mx-auto p-4">
    <h3 class="text-2xl font-bold mb-4">Todo Tasks</h3>

    <button @onclick="ShowAddItemModal" class="bg-blue-500 text-white px-4 py-2 rounded">Add Item</button>

    @if (showAddItemModal)
    {
        <div class="bg-gray-100 p-4 rounded mt-4">
            <input type="text" @bind="newTask.Name" placeholder="Task Name" class="border p-2 rounded w-full mb-2"/>
            <input type="datetime-local" @bind="newTask.DueDate" class="border p-2 rounded w-full mb-2"/>
            <div class="mb-2">
                <label class="inline-flex items-center">
                    <input type="checkbox" @bind="newTask.IsDone" class="form-checkbox"/>
                    <span class="ml-2">Done</span>
                </label>
            </div>
            <div class="mb-2">
                <label class="inline-flex items-center">
                    <input type="checkbox" @bind="newTask.IsStarred" class="form-checkbox"/>
                    <span class="ml-2">Starred</span>
                </label>
            </div>
            <select @bind="newTask.ListId" class="border p-2 rounded w-full mb-2">
                @foreach (var list in todoLists)
                {
                    <option value="@list.Id">@list.Name</option>
                }
            </select>
            <button @onclick="SaveItem" class="bg-green-500 text-white px-4 py-2 rounded">Add</button>
        </div>
    }

    <ul class="mt-4">
        @foreach (var item in todoItems)
        {
            <li class="border p-4 rounded mb-2">
                <div class="flex justify-between items-center">
                    <input type="text" @bind="item.Name" class="font-semibold"/>
                    <input type="datetime-local" @bind="item.DueDate" class="border p-2 rounded"/>
                </div>
                <div class="flex items-center mt-2">
                    <label class="inline-flex items-center mr-4">
                        <input type="checkbox" @bind="item.IsDone" class="form-checkbox"/>
                        <span class="ml-2">Done</span>
                    </label>
                    <label class="inline-flex items-center">
                        <input type="checkbox" @bind="item.IsStarred" class="form-checkbox"/>
                        <span class="ml-2">Starred</span>
                    </label>
                </div>
                <select @bind="item.ListId" class="border p-2 rounded w-full mt-2">
                    @foreach (var list in todoLists)
                    {
                        <option value="@list.Id">@list.Name</option>
                    }
                </select>
                <div class="flex justify-end mt-2">
                    <button @onclick="() => Edit(item)" class="bg-yellow-500 text-white px-4 py-2 rounded mr-2">Edit</button>
                    <button @onclick="() => DeleteItem(item.Id)" class="bg-red-500 text-white px-4 py-2 rounded">Delete</button>
                </div>
            </li>
        }
    </ul>

    <h3 class="text-2xl font-bold mt-8 mb-4">Todo Lists</h3>

    <button @onclick="ShowAddListModal" class="bg-blue-500 text-white px-4 py-2 rounded">Add List</button>

    @if (showAddListModal)
    {
        <div class="bg-gray-100 p-4 rounded mt-4">
            <input type="text" @bind="newList.Name" placeholder="List Name" class="border p-2 rounded w-full mb-2"/>
            <button @onclick="SaveList" class="bg-green-500 text-white px-4 py-2 rounded">Add</button>
        </div>
    }

    <ul class="mt-4">
        @foreach (var list in todoLists)
        {
            <li class="border p-4 rounded mb-2 flex justify-between items-center">
                <input type="text" @bind="list.Name" class="font-semibold"/>
                <div class="flex justify-end mt-2">
                <button @onclick="() => EditList(list)" class="bg-yellow-500 text-white px-4 py-2 rounded mr-2">Edit</button>
                <button @onclick="() => DeleteList(list.Id)" class="bg-red-500 text-white px-4 py-2 rounded">Delete</button>
                </div>
            </li>
        }
    </ul>
</div>

@code {
    private List<TodoTask> todoItems = new List<TodoTask>();
    private List<TodoList> todoLists = new List<TodoList>();
    private TodoTask newTask = new TodoTask();
    private TodoList newList = new TodoList();
    private bool showAddItemModal = false;
    private bool showAddListModal = false;

    protected override async Task OnInitializedAsync()
    {
        todoLists = (await ApiService.GetTodoLists()).ToList();
        todoItems = (await ApiService.GetTasks()).ToList();
    }

    private void ShowAddItemModal()
    {
        showAddItemModal = !showAddItemModal;
        newTask = new TodoTask();
    }

    private void CloseAddItemModal()
    {
        showAddItemModal = false;
    }

    private async Task SaveItem()
    {
        await ApiService.AddTask(newTask);
        todoItems = (await ApiService.GetTasks()).ToList();
        CloseAddItemModal();
    }

    private async Task DeleteItem(int id)
    {
        await ApiService.DeleteTask(id);
        todoItems = (await ApiService.GetTasks()).ToList();
    }
    private async Task Edit(TodoTask item)
    {
        await ApiService.UpdateTask(item);
        todoItems = (await ApiService.GetTasks()).ToList();
    }

    private void ShowAddListModal()
    {
        showAddListModal = !showAddListModal;
        newList = new TodoList();
    }

    private void CloseAddListModal()
    {
        showAddListModal = false;
    }

    private async Task SaveList()
    {
        await ApiService.AddList(newList);
        todoLists = (await ApiService.GetTodoLists()).ToList();
        CloseAddListModal();
    }
    private async Task EditList(TodoList item)
    {
        await ApiService.UpdateList(item);
        todoLists = (await ApiService.GetTodoLists()).ToList();
    }
    private async Task DeleteList(int id)
    {
        await ApiService.DeleteList(id);
        todoLists = (await ApiService.GetTodoLists()).ToList();
    }
}
